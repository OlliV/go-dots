// Code generated by go-bindata.
// sources:
// schemas/create_identifiers.json
// schemas/hello.json
// schemas/install_filtering_rule.json
// schemas/mitigation_request.json
// schemas/session_configuration.json
// schemas/test.json
// diameter/eap_dict.xml
// DO NOT EDIT!

package dots_common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasCreate_identifiersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\xc1\x4a\xc4\x40\x0c\x86\xef\x7d\x8a\x10\x3d\xee\x6c\x15\x16\x0f\x3d\xab\xe0\x45\x50\xf0\x01\xc6\x6e\xda\xcd\xd2\xce\x0c\x69\x44\x17\xe9\xbb\xcb\x58\x5c\xa7\xd2\x2a\x82\xd4\x4b\x0b\x7f\xfe\x3f\x5f\x32\x79\xcd\x00\xf0\xb4\x2b\x77\xd4\x5a\x2c\x00\x77\xaa\xa1\xc8\xf3\x7d\xe7\x9d\x19\xd4\xb5\x97\x3a\xdf\x8a\xad\xd4\x9c\x6d\xf2\x41\x3b\xc1\x55\xcc\xe9\x21\x50\x0c\xf9\xc7\x3d\x95\x3a\x68\x41\x7c\x20\x51\xa6\x0e\x0b\x88\xdd\x01\x90\xb7\xe4\x94\x2b\x26\x39\x6a\x00\x68\x1b\xb6\xd1\x84\x56\xc4\x1e\xde\xd3\x83\x5b\xa9\xed\x12\xe3\x87\xd5\x38\xdb\xd2\x48\x4f\x46\xe8\x54\xd8\xd5\x78\x2c\xf5\xab\xcf\x34\x87\xb9\xd4\x98\x3c\x43\xff\x96\x03\xd0\x4f\x32\x83\x50\xc5\x2f\xff\xc0\xf5\xa2\x46\xac\xab\x67\x5f\xea\xf7\xec\xe4\xbc\x49\x75\xe2\xd0\x49\xb5\xf1\xcf\x24\x26\x4e\x13\x3b\xb0\x53\xaa\x49\xbe\xb4\x00\xc0\xa7\x10\x26\x6c\x23\x57\xff\xe3\xce\x2a\xb6\xaa\xb8\x34\x41\xbc\xfa\xd2\x37\x7f\xb7\xf9\xc4\x40\xd3\x23\x5c\xdf\x5d\xde\x2e\x7f\xec\x87\xfb\x9b\xe5\xa1\x57\xeb\xf3\x8b\xcd\x42\xd8\x2c\xfd\xc7\x6f\x9f\xf5\x6f\x01\x00\x00\xff\xff\xf0\x1a\xbe\x9f\xb2\x04\x00\x00")

func schemasCreate_identifiersJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasCreate_identifiersJson,
		"schemas/create_identifiers.json",
	)
}

func schemasCreate_identifiersJson() (*asset, error) {
	bytes, err := schemasCreate_identifiersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/create_identifiers.json", size: 1202, mode: os.FileMode(420), modTime: time.Unix(1505447922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasHelloJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xb0\x0c\x23\x25\x0c\x4c\xb9\x4d\x28\x26\x6d\xa5\xd6\x96\xed\x05\xa1\xde\x1d\x99\x48\xa8\xc3\x5b\x3e\xe9\x7f\x9f\x04\x80\x67\x1b\x27\x5a\x2b\x16\xc0\xc9\x5d\x4a\xce\x8b\xf1\x36\x74\xbd\xb2\xb6\xfc\xd4\xfa\xf2\xe1\x76\xcf\xdd\x4e\x78\x89\xce\xdf\x42\x11\xf1\x63\xa1\xd1\xbb\x89\xb2\x90\xfa\x4c\x86\x05\xe2\x1d\x00\x57\x32\xab\x8d\xfe\x70\x48\xcd\x75\xde\x1a\xfe\x78\x4f\xb1\x3d\x7d\x03\x00\x00\xff\xff\x42\x56\xee\x03\x94\x00\x00\x00")

func schemasHelloJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasHelloJson,
		"schemas/hello.json",
	)
}

func schemasHelloJson() (*asset, error) {
	bytes, err := schemasHelloJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/hello.json", size: 148, mode: os.FileMode(420), modTime: time.Unix(1505447922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasInstall_filtering_ruleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x52\x41\x4e\xc3\x30\x10\xbc\xf7\x15\x96\xe1\x58\x13\x0e\x3d\xe5\x37\x8b\xb3\x34\x2e\x89\x1d\xad\xb7\xa0\x08\xe5\xef\xc8\x31\x04\x27\x76\x73\x40\x42\xea\x25\x59\xcd\xce\x8c\x66\xb4\xfe\x3c\x08\x21\x1f\xbd\x6e\xb1\x07\x59\x0b\xd9\x32\x0f\x75\x55\x5d\xbc\xb3\x2a\xa2\x4f\x8e\xce\x55\x43\xf0\xca\xea\xf9\x54\x45\xec\x41\x1e\x83\x8e\xc7\x01\x83\xc8\xbd\x5c\x50\x73\xc4\x06\x72\x03\x12\x1b\xf4\xb2\x16\xc1\x5d\x08\x09\x5a\xa3\xf7\xaa\x33\x9e\x7f\xd1\x19\xef\x82\x1c\x88\x60\x9c\xd5\x33\x6a\x18\xfb\x94\x16\x89\xca\x42\x8f\x2b\x34\x09\xe0\x99\x8c\x3d\xcb\x65\x35\x1d\xd7\xda\x6f\xde\x1f\xb4\x4b\x70\x85\x96\x29\x6d\xb5\x50\x30\xef\x70\xa3\xc7\x0c\xd3\xb5\xc3\x52\x99\xdd\x50\x9b\x60\x33\xb7\x07\xd6\x6d\x16\x68\x65\x93\x1c\x66\xb5\x2f\x1c\x69\xb5\xf7\xee\x4a\x1a\x95\x19\xde\x4f\xca\x22\x7f\x38\x7a\x4b\x52\x6d\xed\x84\x90\x0d\x7a\x36\x16\xd8\x38\x7b\x4b\xb5\x11\x4d\xbb\xdd\x40\x07\xab\x7f\xe9\xd6\xa0\x1d\x8b\x9b\xc4\x3b\xbf\xe6\x42\x29\x5f\x35\x73\x28\x97\xce\x8b\x17\xca\xc7\x16\x48\xbd\xe1\xfb\xcf\x49\xc0\xa8\x3a\x73\x7f\x59\xf7\x9f\xdb\xa1\x34\xff\x4c\xf1\x1f\xbe\xd3\x61\xfa\x0a\x00\x00\xff\xff\x40\x61\xd1\x74\x21\x05\x00\x00")

func schemasInstall_filtering_ruleJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasInstall_filtering_ruleJson,
		"schemas/install_filtering_rule.json",
	)
}

func schemasInstall_filtering_ruleJson() (*asset, error) {
	bytes, err := schemasInstall_filtering_ruleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/install_filtering_rule.json", size: 1313, mode: os.FileMode(420), modTime: time.Unix(1505447922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasMitigation_requestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xc1\x4e\xbc\x30\x10\xc6\xef\x3c\x45\xd3\xff\xff\xb8\x2c\x9a\x6c\x3c\x70\x56\x13\x2f\x26\x9a\xf8\x00\x95\x1d\xba\xb3\x01\xa6\x19\xc6\xe8\xc6\xf0\xee\x06\x30\xa6\xad\x2c\x5c\xd4\x70\x01\x32\x5f\xe7\xcb\xaf\xd3\xaf\xbc\x27\x4a\xe9\xff\x6d\x71\x80\xda\xe8\x5c\xe9\x83\x88\xcb\xb3\xec\xd8\x52\x93\x8e\xd5\x2d\xb1\xcd\xf6\x6c\x4a\x49\x2f\x76\xd9\x58\xfb\xa7\x37\x7d\x9f\x9c\x1c\xf4\x4d\xf4\x7c\x84\x42\xc6\x9a\x63\x72\xc0\x82\xd0\xea\x5c\xf5\xee\x4a\xe9\x1a\x05\xad\x11\x1c\x3c\x69\xe8\x19\x15\xa5\x74\x5c\xf0\x6c\x0d\xb3\x39\x0d\xae\x9f\x02\x0a\xd4\x6d\xb0\x36\x34\xc7\x7d\x24\x7a\x66\xd8\x08\x58\x60\xed\xa9\xdd\xc6\xf7\x11\xc3\x16\x24\x45\x77\xde\x23\x06\x3a\x0b\x15\x74\xb5\xc2\xd8\x58\x1d\xc8\xdd\x12\x86\x63\x28\xf1\x6d\x1d\x28\xc4\x92\xb2\x69\x2c\xfc\x34\x8e\x97\x9b\x40\x9f\xc8\x50\xa0\x57\xf4\x0a\x3c\x70\xf9\x27\x1b\xdb\x28\xa5\x5f\x9c\x9b\x58\x18\xad\xeb\xc2\x71\x44\x9b\xf8\x3a\x0f\x12\x2a\xa8\x9a\xdb\xce\xd4\x10\x66\xc6\x30\x1f\xce\x65\xb2\xdb\x87\xeb\xfb\xdf\xc1\x99\x8a\xc9\x12\xcd\xd3\xe3\xdd\x7a\x60\x6e\xb6\x97\x57\xbb\xf5\xe0\x98\x0a\xcd\xec\x45\xf8\x5b\x9c\x0a\x4b\x10\xac\xbf\x5f\xe7\xa5\x44\x06\xbf\x8a\x24\xfe\x1a\xdf\xfd\xb3\x4b\xba\x8f\x00\x00\x00\xff\xff\xd0\xf8\x5d\x8f\x58\x06\x00\x00")

func schemasMitigation_requestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasMitigation_requestJson,
		"schemas/mitigation_request.json",
	)
}

func schemasMitigation_requestJson() (*asset, error) {
	bytes, err := schemasMitigation_requestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/mitigation_request.json", size: 1624, mode: os.FileMode(420), modTime: time.Unix(1505453027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasSession_configurationJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcc\xb1\x8e\x83\x30\x0c\xc6\xf1\x9d\xa7\x88\x72\x37\x92\xcb\x0d\x9d\x78\x1b\x13\x0c\x84\x36\x71\xe4\x98\xaa\x55\xc5\xbb\x57\x69\x24\xd4\xa1\x03\x1d\xbc\xfc\xad\xdf\xf7\x68\x94\xd2\xbf\xd9\xcd\x18\x40\x77\x4a\xcf\x22\xa9\xb3\x76\xc9\x14\x4d\xad\x7f\xc4\x93\x1d\x18\x46\x31\xff\x27\x5b\xdb\x8f\x6e\x8b\x93\x7b\xc2\x82\xa8\x5f\xd0\x49\x6d\x89\x29\x21\x8b\xc7\xac\x3b\x55\xd6\x95\xd2\x19\x73\xf6\x14\x8d\x1f\xf6\xf6\xa6\x7d\x14\x9c\x90\xf5\xab\x6f\x6d\x25\x33\x02\x4b\x8f\x20\xa6\xbc\xf9\x0a\x97\xc3\x34\xc0\xcd\x30\x0a\x43\xcc\xc1\xcb\x61\x06\xee\x6c\xc4\x07\xa4\xf5\x3b\xc3\x10\x07\x0a\x66\x04\x27\xc4\x9f\x64\x5c\x43\xbf\xc3\xa6\xdc\xf6\x0c\x00\x00\xff\xff\x67\xdb\x87\x4d\x76\x01\x00\x00")

func schemasSession_configurationJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasSession_configurationJson,
		"schemas/session_configuration.json",
	)
}

func schemasSession_configurationJson() (*asset, error) {
	bytes, err := schemasSession_configurationJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/session_configuration.json", size: 374, mode: os.FileMode(420), modTime: time.Unix(1505447922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xb0\x0c\x23\x25\x0c\x4c\xb9\x4d\x28\x26\x6d\xa5\xd6\x96\xed\x05\xa1\xde\x1d\x99\x48\xa8\xc3\x5b\x3e\xe9\x7f\x9f\x04\x80\x67\x1b\x27\x5a\x2b\x16\xc0\xc9\x5d\x4a\xce\x8b\xf1\x36\x74\xbd\xb2\xb6\xfc\xd4\xfa\xf2\xe1\x76\xcf\xdd\x4e\x78\x89\xce\xdf\x42\x11\xf1\x63\xa1\xd1\xbb\x89\xb2\x90\xfa\x4c\x86\x05\xe2\x1d\x00\x57\x32\xab\x8d\xfe\x70\x48\xcd\x75\xde\x1a\xfe\x78\x4f\xb1\x3d\x7d\x03\x00\x00\xff\xff\x42\x56\xee\x03\x94\x00\x00\x00")

func schemasTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasTestJson,
		"schemas/test.json",
	)
}

func schemasTestJson() (*asset, error) {
	bytes, err := schemasTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/test.json", size: 148, mode: os.FileMode(420), modTime: time.Unix(1505447922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _diameterEap_dictXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x51\x6f\x22\x37\x10\xc7\xdf\xf3\x29\x56\x7e\x77\xe9\x55\x6a\x74\x0f\x6c\x4e\x88\x4b\x5a\x74\x81\xdb\x6e\x48\x55\xf5\xcd\xb7\x1e\xc0\x8a\xd7\xb3\x1d\xdb\x14\xfa\xe9\xab\xf5\x72\x49\xca\x91\x84\xb5\xb9\xb6\xa9\xfa\x04\x82\x9d\x9f\xc6\xe3\xf1\xcc\x7f\xd6\xc3\x77\x9b\x5a\x67\x6b\x20\xab\xd0\xe4\xec\xcd\x37\xdf\xb2\x0c\x4c\x85\x52\x99\x65\xce\x6e\xe7\x57\xfc\x2d\xcb\xde\x5d\x9c\x0d\xa5\x12\x35\x38\xa0\x8b\xb3\x2c\xcb\xb2\xa1\x68\x1a\xad\x2a\xe1\x14\x9a\x4c\xc9\x9c\x7d\xcf\x32\xb7\x6d\x20\x67\xc2\xbb\x15\xeb\x1e\x0a\x0f\x56\x58\xd7\xc2\xc8\xac\x42\x09\x39\xfb\xee\xfc\x2d\xcb\xec\x0a\xc9\xe5\xec\xfd\x25\xcb\x8c\xa8\x21\x7c\x7b\xb0\x08\x56\x04\xbf\x79\xb0\xee\xaf\xbf\x76\xff\x78\x0d\x99\x58\x37\x39\xbb\x01\xdb\x3a\xcd\x27\x92\x65\xed\xf3\x8a\x40\xe6\xcc\x91\x07\x96\xd5\x62\x93\xb3\x37\x6c\xf0\x2c\x60\xe4\xdd\x8a\x8f\x1e\x16\x12\x4f\xfa\x48\x6a\xa9\x0c\xff\x11\xad\x4b\x23\x94\x20\x74\x1d\x89\x78\x0f\xd6\x29\xd3\xad\x24\x85\x13\xc2\x52\x76\x1b\xc0\xe7\xdb\x06\x4e\xe0\xcf\x7e\x64\x16\x42\xdb\x63\x39\xb3\xd1\x0d\x9f\x48\x30\x4e\x2d\x14\x50\x12\xa5\xe0\x23\x29\x09\xac\x4d\xa3\xac\xcf\x4f\xc1\x29\x90\x92\x62\xd2\xda\xef\xa5\x6c\x14\x62\x7f\x8b\xfb\x40\x76\x69\x7b\xe3\x84\x83\x04\x5f\x82\x1f\xd7\xaa\x56\xd1\x01\xb9\xb5\x40\x7c\x26\xea\xe8\x95\x5c\x8e\x0a\x5e\x88\xad\x46\x11\x5b\x04\x5a\xc2\x07\xd8\x26\x79\x71\x03\xb4\x56\x15\x24\xed\x49\xd8\x8c\x58\xe3\xf6\xf0\x23\xa9\x3f\xba\x63\x7b\xad\x16\xe0\x54\xfc\x72\x42\x29\xf9\x81\x44\x05\xbc\x00\x52\x18\x9d\x20\x01\xf4\xb9\xe0\x27\x2d\x70\x2c\xb4\xfe\x24\xaa\x3b\x3e\xf3\xf5\xa7\xf8\x72\xd2\x62\x40\x06\x57\xbe\xec\x1c\x7d\x41\xca\x2c\x4f\x40\xea\xce\xa2\x70\x2d\xed\x5a\x19\xe0\x13\xb3\xc0\x68\xb7\xd0\x18\xa8\x5c\x12\xe3\x8a\x44\x0d\x92\x8f\xb1\x6e\xa8\xdb\xba\x2f\x49\x47\x11\x26\xc6\x01\x2d\xda\x2c\x8a\x8f\xce\x67\x54\x72\x0b\xb8\x07\xad\xcf\x79\x41\xb0\x50\x9b\xd8\x55\x15\x7c\x06\xae\x16\xf6\x2e\xd1\x95\xe9\xfc\x36\x91\x50\x10\x3a\xac\x50\xc7\x62\xe6\xde\x18\x68\xd3\xb8\x6f\x28\x0a\xc2\xcd\xf6\x89\x24\x7b\xde\xb2\x44\xef\x80\x97\x50\x21\x1d\xc8\x89\x17\xaa\xc9\xcf\xc5\x8b\x26\xc3\xc1\x41\x0d\x3a\x24\xb0\x0d\x1a\x0b\xaf\x45\x9a\x9e\x4a\xcd\x95\x60\xbd\x76\x7c\x8c\x32\x96\xf0\xaf\x10\xc9\x5f\x4b\x27\xf4\x45\x94\xa0\xac\xf5\xed\xd1\x4b\x67\x4d\x85\x75\x40\xf7\xed\xf1\x03\x6c\x53\x68\xa9\x12\x66\xea\xb5\x53\xbc\x44\x6f\x24\x9f\xab\x1a\xf8\x47\x1f\xad\xea\x46\x55\x85\xde\x84\x8e\xd6\xba\x16\x72\x79\x0a\x6e\x15\x2f\x24\x4e\x21\xb0\xc6\x5a\x1c\x6a\x1f\x2f\x36\xd4\x85\x5a\x7a\xea\x8e\xf3\x1c\xef\xa0\x77\x37\x1c\x55\xa1\x21\x3b\x20\x55\x77\x9f\x6b\x11\x5d\xb2\x2f\x89\x90\xf8\x14\xac\x15\xcb\xf8\xc3\x10\x20\x25\x34\x48\x61\x93\x52\xc6\xbc\x2b\xa1\x5a\x45\x75\x4c\x6d\xde\xb3\x9c\x48\x0d\x21\xd5\x30\x21\xd3\xfe\xeb\xba\xb7\x04\xfe\x6c\x2b\xe8\x77\x88\x3a\x87\x12\x63\x9e\xb8\x9e\x46\x6f\x9f\xce\xdf\xbf\x65\x6c\xbd\x52\xba\x2d\xbc\x87\x00\x5f\x7b\xde\xbd\x1f\x63\xd2\x26\x8f\x13\x4c\x42\x3b\x09\xd9\x8a\x15\x70\x42\xdf\xb5\xb3\x47\xaa\xa2\x7d\x80\xcd\xc0\xfd\x8e\x74\x80\xd7\x93\xf3\x2b\x9a\xe8\x54\xfb\x7f\x8e\x39\x82\x80\xf1\xd3\xc3\x63\x4e\x90\xf5\xff\xf4\x40\x95\xe2\xc4\x49\x02\xf1\xcb\xd3\x79\xff\xca\x26\xc3\x47\x11\x3d\x38\x1e\x1e\xff\xae\x72\x57\x6c\x4b\xaf\x7b\x6f\xcd\x4f\x98\x64\x1e\x3d\xdd\x96\x20\x15\x41\xe5\x9e\xd0\x45\x3d\x8c\xf9\x6d\x8a\x4c\xbb\x47\x4d\xc5\x86\x8f\x45\xb5\xea\xe4\x52\xf4\xdb\xda\xe8\xa1\xfd\xd8\xc1\x7b\x7f\xc4\x1e\x0e\x76\xd7\x48\xbb\xdb\xa7\xc1\xa3\xeb\xa7\x8b\xb3\xe1\xe0\xe1\x72\xea\xcf\x00\x00\x00\xff\xff\x99\x9c\x37\xd7\xd0\x1a\x00\x00")

func diameterEap_dictXmlBytes() ([]byte, error) {
	return bindataRead(
		_diameterEap_dictXml,
		"diameter/eap_dict.xml",
	)
}

func diameterEap_dictXml() (*asset, error) {
	bytes, err := diameterEap_dictXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "diameter/eap_dict.xml", size: 6864, mode: os.FileMode(420), modTime: time.Unix(1505977405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/create_identifiers.json": schemasCreate_identifiersJson,
	"schemas/hello.json": schemasHelloJson,
	"schemas/install_filtering_rule.json": schemasInstall_filtering_ruleJson,
	"schemas/mitigation_request.json": schemasMitigation_requestJson,
	"schemas/session_configuration.json": schemasSession_configurationJson,
	"schemas/test.json": schemasTestJson,
	"diameter/eap_dict.xml": diameterEap_dictXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"diameter": &bintree{nil, map[string]*bintree{
		"eap_dict.xml": &bintree{diameterEap_dictXml, map[string]*bintree{}},
	}},
	"schemas": &bintree{nil, map[string]*bintree{
		"create_identifiers.json": &bintree{schemasCreate_identifiersJson, map[string]*bintree{}},
		"hello.json": &bintree{schemasHelloJson, map[string]*bintree{}},
		"install_filtering_rule.json": &bintree{schemasInstall_filtering_ruleJson, map[string]*bintree{}},
		"mitigation_request.json": &bintree{schemasMitigation_requestJson, map[string]*bintree{}},
		"session_configuration.json": &bintree{schemasSession_configurationJson, map[string]*bintree{}},
		"test.json": &bintree{schemasTestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

