// Code generated by go-bindata.
// sources:
// eap_dict.xml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _eap_dictXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x51\x6f\x22\x37\x10\xc7\xdf\xf3\x29\x56\x7e\x77\xe9\x55\x6a\x74\x0f\x6c\x4e\x88\x4b\x5a\x74\x81\xdb\x6e\x48\x55\xf5\xcd\xb7\x1e\xc0\x8a\xd7\xb3\x1d\xdb\x14\xfa\xe9\xab\xf5\x72\x49\xca\x91\x84\xb5\xb9\xb6\xa9\xfa\x04\x82\x9d\x9f\xc6\xe3\xf1\xcc\x7f\xd6\xc3\x77\x9b\x5a\x67\x6b\x20\xab\xd0\xe4\xec\xcd\x37\xdf\xb2\x0c\x4c\x85\x52\x99\x65\xce\x6e\xe7\x57\xfc\x2d\xcb\xde\x5d\x9c\x0d\xa5\x12\x35\x38\xa0\x8b\xb3\x2c\xcb\xb2\xa1\x68\x1a\xad\x2a\xe1\x14\x9a\x4c\xc9\x9c\x7d\xcf\x32\xb7\x6d\x20\x67\xc2\xbb\x15\xeb\x1e\x0a\x0f\x56\x58\xd7\xc2\xc8\xac\x42\x09\x39\xfb\xee\xfc\x2d\xcb\xec\x0a\xc9\xe5\xec\xfd\x25\xcb\x8c\xa8\x21\x7c\x7b\xb0\x08\x56\x04\xbf\x79\xb0\xee\xaf\xbf\x76\xff\x78\x0d\x99\x58\x37\x39\xbb\x01\xdb\x3a\xcd\x27\x92\x65\xed\xf3\x8a\x40\xe6\xcc\x91\x07\x96\xd5\x62\x93\xb3\x37\x6c\xf0\x2c\x60\xe4\xdd\x8a\x8f\x1e\x16\x12\x4f\xfa\x48\x6a\xa9\x0c\xff\x11\xad\x4b\x23\x94\x20\x74\x1d\x89\x78\x0f\xd6\x29\xd3\xad\x24\x85\x13\xc2\x52\x76\x1b\xc0\xe7\xdb\x06\x4e\xe0\xcf\x7e\x64\x16\x42\xdb\x63\x39\xb3\xd1\x0d\x9f\x48\x30\x4e\x2d\x14\x50\x12\xa5\xe0\x23\x29\x09\xac\x4d\xa3\xac\xcf\x4f\xc1\x29\x90\x92\x62\xd2\xda\xef\xa5\x6c\x14\x62\x7f\x8b\xfb\x40\x76\x69\x7b\xe3\x84\x83\x04\x5f\x82\x1f\xd7\xaa\x56\xd1\x01\xb9\xb5\x40\x7c\x26\xea\xe8\x95\x5c\x8e\x0a\x5e\x88\xad\x46\x11\x5b\x04\x5a\xc2\x07\xd8\x26\x79\x71\x03\xb4\x56\x15\x24\xed\x49\xd8\x8c\x58\xe3\xf6\xf0\x23\xa9\x3f\xba\x63\x7b\xad\x16\xe0\x54\xfc\x72\x42\x29\xf9\x81\x44\x05\xbc\x00\x52\x18\x9d\x20\x01\xf4\xb9\xe0\x27\x2d\x70\x2c\xb4\xfe\x24\xaa\x3b\x3e\xf3\xf5\xa7\xf8\x72\xd2\x62\x40\x06\x57\xbe\xec\x1c\x7d\x41\xca\x2c\x4f\x40\xea\xce\xa2\x70\x2d\xed\x5a\x19\xe0\x13\xb3\xc0\x68\xb7\xd0\x18\xa8\x5c\x12\xe3\x8a\x44\x0d\x92\x8f\xb1\x6e\xa8\xdb\xba\x2f\x49\x47\x11\x26\xc6\x01\x2d\xda\x2c\x8a\x8f\xce\x67\x54\x72\x0b\xb8\x07\xad\xcf\x79\x41\xb0\x50\x9b\xd8\x55\x15\x7c\x06\xae\x16\xf6\x2e\xd1\x95\xe9\xfc\x36\x91\x50\x10\x3a\xac\x50\xc7\x62\xe6\xde\x18\x68\xd3\xb8\x6f\x28\x0a\xc2\xcd\xf6\x89\x24\x7b\xde\xb2\x44\xef\x80\x97\x50\x21\x1d\xc8\x89\x17\xaa\xc9\xcf\xc5\x8b\x26\xc3\xc1\x41\x0d\x3a\x24\xb0\x0d\x1a\x0b\xaf\x45\x9a\x9e\x4a\xcd\x95\x60\xbd\x76\x7c\x8c\x32\x96\xf0\xaf\x10\xc9\x5f\x4b\x27\xf4\x45\x94\xa0\xac\xf5\xed\xd1\x4b\x67\x4d\x85\x75\x40\xf7\xed\xf1\x03\x6c\x53\x68\xa9\x12\x66\xea\xb5\x53\xbc\x44\x6f\x24\x9f\xab\x1a\xf8\x47\x1f\xad\xea\x46\x55\x85\xde\x84\x8e\xd6\xba\x16\x72\x79\x0a\x6e\x15\x2f\x24\x4e\x21\xb0\xc6\x5a\x1c\x6a\x1f\x2f\x36\xd4\x85\x5a\x7a\xea\x8e\xf3\x1c\xef\xa0\x77\x37\x1c\x55\xa1\x21\x3b\x20\x55\x77\x9f\x6b\x11\x5d\xb2\x2f\x89\x90\xf8\x14\xac\x15\xcb\xf8\xc3\x10\x20\x25\x34\x48\x61\x93\x52\xc6\xbc\x2b\xa1\x5a\x45\x75\x4c\x6d\xde\xb3\x9c\x48\x0d\x21\xd5\x30\x21\xd3\xfe\xeb\xba\xb7\x04\xfe\x6c\x2b\xe8\x77\x88\x3a\x87\x12\x63\x9e\xb8\x9e\x46\x6f\x9f\xce\xdf\xbf\x65\x6c\xbd\x52\xba\x2d\xbc\x87\x00\x5f\x7b\xde\xbd\x1f\x63\xd2\x26\x8f\x13\x4c\x42\x3b\x09\xd9\x8a\x15\x70\x42\xdf\xb5\xb3\x47\xaa\xa2\x7d\x80\xcd\xc0\xfd\x8e\x74\x80\xd7\x93\xf3\x2b\x9a\xe8\x54\xfb\x7f\x8e\x39\x82\x80\xf1\xd3\xc3\x63\x4e\x90\xf5\xff\xf4\x40\x95\xe2\xc4\x49\x02\xf1\xcb\xd3\x79\xff\xca\x26\xc3\x47\x11\x3d\x38\x1e\x1e\xff\xae\x72\x57\x6c\x4b\xaf\x7b\x6f\xcd\x4f\x98\x64\x1e\x3d\xdd\x96\x20\x15\x41\xe5\x9e\xd0\x45\x3d\x8c\xf9\x6d\x8a\x4c\xbb\x47\x4d\xc5\x86\x8f\x45\xb5\xea\xe4\x52\xf4\xdb\xda\xe8\xa1\xfd\xd8\xc1\x7b\x7f\xc4\x1e\x0e\x76\xd7\x48\xbb\xdb\xa7\xc1\xa3\xeb\xa7\x8b\xb3\xe1\xe0\xe1\x72\xea\xcf\x00\x00\x00\xff\xff\x99\x9c\x37\xd7\xd0\x1a\x00\x00")

func eap_dictXmlBytes() ([]byte, error) {
	return bindataRead(
		_eap_dictXml,
		"eap_dict.xml",
	)
}

func eap_dictXml() (*asset, error) {
	bytes, err := eap_dictXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "eap_dict.xml", size: 6864, mode: os.FileMode(420), modTime: time.Unix(1505977405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"eap_dict.xml": eap_dictXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"eap_dict.xml": &bintree{eap_dictXml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

