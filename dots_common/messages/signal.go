package messages

import "fmt"

type TargetPortRange struct {
	LowerPort int `json:"lower-port" codec:"6"`
	UpperPort int `json:"upper-port" codec:"7"`
}

type MitigationScope struct {
	ClientIdentifiers []string `json:"client-identifier" codec:"32"`
	Scopes            []Scope  `json:"scope"             codec:"2"`
}

type Scope struct {
	// Identifier for the mitigation request
	MitigationId int `json:"mitigation-id" codec:"3"`
	// IP address
	TargetIp []string `json:"target-ip" codec:"4"`
	// prefix
	TargetPrefix []string `json:"target-prefix" codec:"31"`
	// lower-port upper-port
	TargetPortRange []TargetPortRange `json:"target-port-range" codec:"5"`
	// Internet Protocol number
	TargetProtocol []int `json:"target-protocol" codec:"8"`
	// FQDN
	FQDN []string `json:"FQDN" codec:"9"`
	// URI
	URI []string `json:"URI" codec:"10"`
	// alias name
	AliasName []string `json:"alias-name" codec:"11"`
	// lifetime
	Lifetime int `json:"lifetime" codec:"12"`
}

type MitigationRequest struct {
	MitigationScope MitigationScope `json:"mitigation-scope" codec:"1"`
}

/*
 * Convert MitigationRequests to strings
 */
func (m *MitigationRequest) String() (result string) {
	result = "\n \"mitigation-scope\":\n"
	for key, clientIdentifier := range m.MitigationScope.ClientIdentifiers {
		result += fmt.Sprintf("   \"%s[%d]\": %s\n", "client-identifier", key+1, clientIdentifier)
	}
	for key, scope := range m.MitigationScope.Scopes {
		result += fmt.Sprintf("   \"%s[%d]\":\n", "scope", key+1)
		result += fmt.Sprintf("     \"%s\": %d\n", "mitigation-id", scope.MitigationId)
		if scope.TargetIp != nil {
			for k, v := range scope.TargetIp {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-ip", k+1, v)
			}
		}
		if scope.TargetPrefix != nil {
			for k, v := range scope.TargetPrefix {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "target-prefix", k+1, v)
			}
		}
		if scope.TargetPortRange != nil {
			for k, v := range scope.TargetPortRange {
				result += fmt.Sprintf("     \"%s[%d]\":\n", "target-port-range", k+1)
				result += fmt.Sprintf("       \"%s\": %d\n", "lower-port", v.LowerPort)
				result += fmt.Sprintf("       \"%s\": %d\n", "upper-port", v.UpperPort)
			}
		}
		if scope.TargetProtocol != nil {
			for k, v := range scope.TargetProtocol {
				result += fmt.Sprintf("     \"%s[%d]\": %d\n", "target-protocol", k+1, v)
			}
		}
		if scope.FQDN != nil {
			for k, v := range scope.FQDN {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "FQDN", k+1, v)
			}
		}
		if scope.URI != nil {
			for k, v := range scope.URI {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "URI", k+1, v)
			}
		}
		if scope.AliasName != nil {
			for k, v := range scope.AliasName {
				result += fmt.Sprintf("     \"%s[%d]\": %s\n", "alias-name", k+1, v)
			}
		}
		result += fmt.Sprintf("     \"%s\": %d\n", "lifetime", scope.Lifetime)
	}
	return
}

type SignalConfigRequest struct {
	SignalConfig SignalConfig `json:"signal-config" codec:"14"`
}

type SignalConfig struct {
	// Identifier for the DOTS signal channel session configuration data represented as an integer.
	// This identifier MUST be generated by the DOTS client.  This document does not make any assumption about how this
	// identifier is generated. This is a mandatory attribute.
	SessionId int `json:"session-id" codec:"26"`
	// Heartbeat interval to check the DOTS peer health.  This is an optional attribute.
	HeartbeatInterval int `json:"heartbeat-interval" codec:"15"`
	// Maximum number of missing heartbeat response allowed. This is an optional attribute.
	MissingHbAllowed int `json:"missing-hb-allowed" codec:"28"`
	// Maximum number of retransmissions for a message (referred to as MAX_RETRANSMIT parameter in CoAP).
	// This is an optional attribute.
	MaxRetransmit int `json:"max-retransmit" codec:"16"`
	// Timeout value in seconds used to calculate the initial retransmission timeout value (referred to as ACK_TIMEOUT
	// parameter in CoAP). This is an optional attribute.
	AckTimeout int `json:"ack-timeout" codec:"17"`
	// Random factor used to influence the timing of retransmissions (referred to as ACK_RANDOM_FACTOR parameter in
	// CoAP).  This is an optional attribute.
	AckRandomFactor float64 `json:"ack-random-factor" codec:"18"`
	// If false, mitigation is triggered only if the signal channel is lost. This is an optional attribute.
	TriggerMitigation bool `json:"trigger-mitigation" codec:"27"`
}

type HelloRequest struct {
	Message string `json:"message" cbor:"message"`
}

type HelloResponse struct {
	Message string `json:"message" cbor:"message"`
}
